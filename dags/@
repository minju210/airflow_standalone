from datetime import datetime, timedelta
from textwrap import dedent
from pprint import pprint

# The DAG object; we'll need this to instantiate a DAG
from airflow import DAG

# Operators; we need this to operate!
from airflow.operators.bash import BashOperator
from airflow.operators.empty import EmptyOperator
from airflow.models.dag import DAG
from airflow.operators.python import (
    #ExternalPythonOperator,
    PythonOperator,
    BranchPythonOperator,
    PythonVirtualenvOperator,
    #is_venv_installed,
)
with DAG(
    'movie',
    # These args will get passed on to each operator
    # You can override them on a per-task basis during operator initialization
    default_args={
        'depends_on_past': True,
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(seconds=3)
    },
    description='movie DAG',
    #schedule_interval=timedelta(days=1),
    schedule="10 2 * * *",
    start_date=datetime(2024, 7, 24),
    catchup=True,
    tags=['movie', 'api', 'amt'],
) as dag:
    def get_data(ds, **kwargs):
        print(ds)
        print(kwargs)
        print("=" * 20)
        print(f"ds_nodash => {kwargs['ds_nodash']}")
        print(f"kwargs type => {type(kwargs)}")
        print("=" * 20)
        from mov.api.call import get_key, save2df
        key = get_key()
        print(f"MOVIE_API_KEY => {key}")
        YYYYMMDD = kwargs['ds_nodash']
        df = save2df(YYYYMMDD)
        print(df.head(5))

    def print_context(ds=None, **kwargs):
        """Print the Airflow context and ds variable from the context."""
        print("::group::All kwargs")
        pprint(kwargs)
        print(kwargs)
        print("::endgroup::")
        print("::group::Context variable ds")
        print(ds)
        print("::endgroup::")
        return "Whatever you return gets printed in the logs"
    
    def branch_fun(**kwargs):
        ld = kwargs['ds_nodash']
        import os
        home_dir = os.path.expanduser("~")
        path = (f'{home_dir}/tmp/test_parquet/load_dt={ld}')
        path = os.path.join(home_dir, "tmp/test_parquet/load_dt={ld}")
        if os.path.exists(path):
            return "rm.dir"
        else:
            return "get.data", "echo.task"
        
    branch_op = BranchPythonOperator(
        task_id="branch.op",
        python_callable=branch_fun
    )


    get_data = PythonVirtualenvOperator(
        task_id="get.data",
        trigger_rule="all_done",
        python_callable=get_data,
        requirements=["git+https://github.com/minju210/movie.git@0.2/api"],
        system_site_packages=False,
    )

    save_data = BashOperator(
        task_id="save_data",
        bash_command='date',
        #trigger_rule="all_done"
        trigger_rule="one_success"
    )
    
    rm_dir = BashOperator(
        task_id='rm.dir',
        bash_command='rm -rf ~/tmp/test_parquet/load_dt={{ ds_nodash }}',
    )

    echo_task = BashOperator(
        task_id='echo.task',
        bash_command="echo 'task'"
    )

    start = EmptyOperator(task_id='start')
    end = EmptyOperator(task_id='end')
    join_task = BashOperator(
            task_id='join',
            bash_command="exit 1",
            trigger_rule="all_done"
    )
    
    start >> branch_op
    start >> join_task >> save_data

    branch_op >> rm_dir >> get_data
    branch_op >> echo_task
    branch_op >> get_data
    
    get_data >> save_data >> end
